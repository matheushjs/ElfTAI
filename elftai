#!/usr/bin/python3

#    ElfTAI specific CSV file manager.
#    Copyright (C) 2017 Matheus Henrique Junqueira Saldanha
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: matheus.saldanha@usp.br

import sys
import termcolor as tc
from argparse import ArgumentParser

from modules_elf import TitleManager

def main():
    parser = ArgumentParser(description="ElfTAI (Title/Alias/Items) - Program for organizing data with specific characteristics.", allow_abbrev=True)
    subp = parser.add_subparsers()
    
    list_parser = subp.add_parser('list', help='List information about one or all Titles')
    list_parser.add_argument('-e', '--entries', nargs='?', default=5, type=int, help='Number of latest items to print')
    list_parser.add_argument('title', nargs="*", type=str, help='Title about which to print specific information. If not given, print summary about all Titles.')
    list_parser.set_defaults(func=parse_list)

    find_parser = subp.add_parser('find', aliases=['search'], help='Display Titles that contain the given item')
    find_parser.add_argument('item', nargs='+', type=str, help='Item to find')
    find_parser.set_defaults(func=parse_find)

    add_parser = subp.add_parser('add', help='Add a Title, alias or item')
    add_parser.add_argument('-t', '--title', nargs='+', type=str, help="Title to create or to which add the given alias/item")
    add_parser.add_argument('-a', '--alias', nargs='+', type=str, help="Alias to add to the given Title")
    add_parser.add_argument('-i', '--item', nargs='+', type=str, help="Item to add to the given Title")
    add_parser.set_defaults(func=parse_add)

    rm_parser = subp.add_parser('rm', help='Remove a Title, alias or item')
    rm_parser.add_argument('-t', '--title', nargs='+', type=str, help="Title to remove")
    rm_parser.add_argument('-a', '--alias', nargs='+', type=str, help="Alias to remove")
    rm_parser.add_argument('-i', '--item', nargs='+', type=str, help="Item to remove")
    rm_parser.set_defaults(func=parse_rm)

    comm_parser = subp.add_parser('comment', help='Change comment associated to a Title')
    comm_parser.add_argument('-t', '--title', nargs=1, type=str, help="Title of which to change comment")
    comm_subp = comm_parser.add_subparsers()
    
    comm_add = comm_subp.add_parser("add", help="Add a comment")
    comm_add.add_argument('strings', nargs='+', help="Comment to add")
    comm_add.set_defaults(func=parse_comm_add)

    comm_rm = comm_subp.add_parser("rm", help="Remove the N-th comment")
    comm_rm.add_argument('index', nargs=1, type=int, help="Index of comment to remove")
    comm_rm.set_defaults(func=parse_comm_rm)

    args = parser.parse_args()
    tm = TitleManager('database_elftai.csv', 'backup_elftai.csv')
    try:
        args.func(args, tm)
    except:
        print("Wrong command line operation. Try running '{} -h'".format(sys.argv[0]))
    else:
        tm.close()

def title_format(string):
    return tc.colored(string, 'magenta', attrs=['bold'])

def yellow_format(string):
    return tc.colored(string, 'yellow')

def bold_format(string):
    return tc.colored(string, attrs=['bold'])

def parse_list(args, tm):
    if args.title: args.title = ' '.join(args.title)

    if args.title:
        try: tm.print_full(args.title, args.entries)
        except ValueError:
            print("Could not find Title identified by '{}'".format(title_format(args.title)))
    else:
        tm.print_summary()

def parse_find(args, tm):
    if args.item: args.item = ' '.join(args.item)
    retval = tm.find_item(args.item)
    if not retval:
        print("No Titles contain item '{}'.".format(bold_format(args.item)))
    else:
        print("Titles that contain item '{}':".format(bold_format(args.item)))
        for node in retval:
            node.print_line()

def parse_add(args, tm):
    if args.title: args.title = ' '.join(args.title)
    if args.alias: args.alias = ' '.join(args.alias)
    if args.item: args.item = ' '.join(args.item)
    
    if not args.title:
        print("You need to specify a Title upon which to operate. Use the -t directive.")
        return

    if args.alias and args.item:
        print("For simplicity purposes, you cannot add alias and items together.\nUse 2 separate commands, please.")
        return

    if args.alias:
        try: tm.add_node(args.title)
        except ValueError:
            pass # Node already exists. Just add alias to it.
        else:
            print("Created Title '{}'".format(title_format(args.title)))

        try: tm.add_alias(args.title, args.alias)
        except ValueError as ve: #Alias already in node
            print("Alias '{}' already exists".format(yellow_format(args.alias)))
        else:
            print("Added alias '{}' to Title identified by '{}'.".format(
                yellow_format(args.alias),
                title_format(args.title))
            )

    elif args.item:
        try: tm.add_node(args.title)
        except ValueError: #Node exists
            try: tm.add_item(args.title, args.item)
            except ValueError: #Item already in Node
                print("Item '{}' already exists in Title identified by '{}'".format(
                        bold_format(args.item),
                        title_format(args.title))
                    )
            else:
                print("Added item '{}' to Title identified by '{}'".format(
                    bold_format(args.item),
                    title_format(args.title))
                )
        else:
            tm.add_item(args.title, args.item)
            print("Created Title '{}', with item '{}'".format(
                title_format(args.title),
                bold_format(args.item))
            )
    else:
        try: tm.add_node(args.title)
        except ValueError: #Node exists
            print("Title identified by '{}' already exists! Nothing has been done.".format(
                title_format(args.title)))
        else:
            print("Created Title '{}'".format(title_format(args.title)))

def parse_rm(args, tm):
    if args.title: args.title = ' '.join(args.title)
    if args.alias: args.alias = ' '.join(args.alias)
    if args.item: args.item = ' '.join(args.item)

    if args.alias:
        if args.item:
            print("Ignoring the given item. Delete it on a separate execution, please.")
        if args.title:
            print("Title is not needed when deleting an alias, hence will be ignored.")

        try: tm.rm_alias(args.alias)
        except ValueError: #alias not found
            print("Could not remove alias '{}'. Confirm if it exists.".format(yellow_format(args.alias)))
        else:
            print("Removed alias '{}'".format(yellow_format(args.alias)))

    elif args.item:
        if not args.title:
            print("Items can only be removed from a single Title. Specify a Title with -t")
            return

        try: tm.rm_item(args.title, args.item)
        except ValueError as ve:
            print("Could not remove item '{}' from Title identified by '{}'.".format(
                bold_format(args.item),
                title_format(args.title))
            )
            print(ve)
        else:
            print("Removed item '{}' from Title identified by '{}'".format(
                bold_format(args.item),
                title_format(args.title))
            )

    elif args.title:
        inp = input(tc.colored("Confirm removal of Title identified by '{}' [Y/n]: ".format(args.title), "red", attrs=['bold']))
        if inp.lower().strip() == 'y':
            try: tm.rm_node(args.title)
            except ValueError:
                print("Title doesn't exist. Nothing has been done.")
            else:
                print("Removed")
        else:
            print("Canceled")

    else:
        print("Please, provide one of the following:\n1) A title with -t\n2) An alias with -a\n3) An item with -i and a title/alias with -t")

def parse_comm_add(args, tm):
    if args.title: args.title = ' '.join(args.title)
    
    if not args.title:
        print("You must provide a title. e.g. ./elftai comment -t 'TITLE' add ...")
        return
    
    try:
        retval = tm.add_comment(args.title, ' '.join(args.strings))
    except ValueError:
        print("Could not find Node identified by title '{}'".format(title_format(args.title)))
    else:
        print("Added comment '{}'.".format(tc.colored(' '.join(args.strings), 'yellow')))

def parse_comm_rm(args, tm):
    if args.title: args.title = ' '.join(args.title)

    if not args.title:
        print("You must provide a title. e.g. ./elftai comment -t 'TITLE' add ...")
        return

    try:
        retval = tm.rm_comment(args.title, args.index[0])
    except ValueError:
        print("Could not find Node identified by title '{}'".format(title_format(args.title)))
    except IndexError:
        print("There is no comment with index '{}'".format(args.index[0]))
    else:
        print("Removed comment '{}'".format(tc.colored(retval, 'yellow')))

if __name__=='__main__':
    main()
